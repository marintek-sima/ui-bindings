package no.marintek.sima.script.tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;

import no.marintek.sima.SIMAPackage;
import no.marintek.sima.impl.BodyImpl;
import no.marintek.sima.script.ScriptContentProposalProvider;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.jface.fieldassist.IContentProposal;
import org.junit.Before;
import org.junit.Test;

public class ContentProposalsTest {

	private ScriptEngineManager mgr = new ScriptEngineManager();
	private ScriptEngine engine = mgr.getEngineByName("JavaScript");
	
	@Before
	public void setUp() {
		engine.put("body", new BodyImpl(){});
		engine.put("m1", new BodyImpl(){});
		engine.put("m2", new BodyImpl(){});
		
	}
	
	@Test
	public void testEmptyProposal() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(3, proposals.length);
		IContentProposal proposal = proposals[0];
		assertTrue("body".equals(proposal.getContent()));
	}

	@Test
	public void testPartialProposal() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="bo";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(1, proposals.length);
		IContentProposal proposal = proposals[0];
		assertTrue("body".equals(proposal.getContent()));
	}

	@Test
	public void testIncompleteProposal() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertTrue(proposals.length>0);
	}
	
	@Test
	public void testMemberProposal() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.nam";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertTrue(proposals.length>0);
		IContentProposal proposal = proposals[0];
		final String content = proposal.getContent();
		assertTrue("body.name".equals(content));
	}
	
	@Test
	public void testCompositeMemberProposal() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.init";
		int position=contents.length();
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertTrue(proposals.length>0);
		final String content = proposals[0].getContent();
		assertTrue("body.initialPosition".equals(content));
	}

	@Test
	public void testMemberProposalWithinLine() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.x+bod";
		int position=contents.length();
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(1, proposals.length);
		final String content = proposals[0].getContent();
		assertTrue("body.x+body".equals(content));
		String proposal = proposals[0].getLabel();
		assertTrue("body".equals(proposal));
	}

	@Test
	public void testCompositeMemberProposalWithinLine() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.initialPosition.x+body.le";
		int position=contents.length();
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(1, proposals.length);
		final String content = proposals[0].getContent();
		assertTrue("body.initialPosition.x+body.length".equals(content));
		String proposal = proposals[0].getLabel();
		assertTrue("length".equals(proposal));
	}
	
	@Test
	public void testCompositeMemberProposalWithinLine2() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.initialPositon.x+body.initialPosition.";
		int position=contents.length();
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		EClass pos = SIMAPackage.eINSTANCE.getPosition();
		int size = pos.getEAllOperations().size();
		size+=pos.getEAllAttributes().size();
		size+=pos.getEAllReferences().size();
		assertEquals(size, proposals.length);
	}
	
//	@Test
	public void testFunctionProposal() {
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="body.dist";
		int position=10;
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(3, proposals.length);
		final String content = proposals[0].getContent();
		assertTrue("body.distance()".equals(content));
	}
		
	@Test
	public void testSeverableVariableProposals(){
		ScriptContentProposalProvider proposalProvider = new ScriptContentProposalProvider(engine);
		String contents="m";
		int position=1;
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(2, proposals.length);
		final String content = proposals[0].getContent();
		assertTrue("m1".equals(content));
	}

	
}
