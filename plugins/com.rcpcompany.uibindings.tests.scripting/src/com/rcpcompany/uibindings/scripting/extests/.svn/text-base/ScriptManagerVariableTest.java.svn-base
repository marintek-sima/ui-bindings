package no.marintek.sima.script.tests;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;

import no.marintek.sima.SIMAFactory;
import no.marintek.sima.ScriptManager;
import no.marintek.sima.ValueItem;
import no.marintek.sima.Variable;
import no.marintek.sima.VariableItem;
import no.marintek.sima.script.mock.MockBody;
import no.marintek.sima.script.mock.MockFactory;
import no.marintek.sima.script.mock.MockTask;

import org.junit.Test;

public class ScriptManagerVariableTest {

	
	@Test
	public void testVariables() throws Exception {
		MockFactory f = MockFactory.eINSTANCE;
		MockTask task = f.createMockTask();
		task.setName("mock");
		
		ScriptManager manager = task.getScriptManager();
		
		MockBody b1 = f.createMockBody();
		b1.setName("b1");
		b1.setX(1);
		task.getBodies().add(b1);
		
		final SIMAFactory sf = SIMAFactory.eINSTANCE;
		Variable var1 = sf.createDoubleVariable();
		var1.setName("var1");
		var1.setObjectValue(2.0);
		task.getVariables().add(var1);
		
		manager.setScript(b1, "x", "var1+10");
		
		assertEquals(12.0,b1.getX(),0.0);
		
		VariableItem varItem = sf.createVariableItem();
		varItem.setVariable(var1);
		varItem.setValue(3.0);
		List<ValueItem> values = manager.getValuesFor(Arrays.asList(varItem));
		assertEquals(1, values.size());
		ValueItem item = values.get(0);
		assertEquals(b1, item.getObject());
		assertEquals("x", item.getFeature());
		//But now the value should be different from the "original"
		assertEquals(12.0,b1.getX(),0.0);
		assertEquals(13.0,(Double)item.getValue(),0.0);
		
	}
	
}
