package no.marintek.sima.script;

import java.util.ArrayList;

import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;

import no.marintek.sima.utils.scripting.ParserTree;
import no.marintek.sima.utils.scripting.ScriptParser;
import no.marintek.sima.utils.scripting.ScriptVariable;

import org.eclipse.jface.fieldassist.IContentProposal;
import org.eclipse.jface.fieldassist.IContentProposalProvider;

public class ScriptContentProposalProvider implements IContentProposalProvider {

	private final ScriptEngine engine;
	private ScriptParser parser;

	public ScriptContentProposalProvider(ScriptEngine engine) {
		this.engine = engine;
	}

	@Override
	public IContentProposal[] getProposals(String contents, int position) {
		ArrayList<IContentProposal> proposals = createProposals(contents,position);
		return proposals.toArray(new IContentProposal[] {});
	}

	protected ArrayList<IContentProposal> createProposals(String script,int position) {
		if("".equals(script)) {
			return findVariableProposals(script);
		}else {
			return parseScript(script, position);
		}
	}

	private ArrayList<IContentProposal> parseScript(String script,int position) {
		parser = new ScriptParser(script);
		ParserTree token = parser.findTokenLeftOfPosition(position);
		if (token != null) {
			return createProposalsBasedOnToken(token,script,position);
		} else {
			return findVariableProposals(script);
		}
	}

	/**
	 * @param proposals
	 * @param partialName
	 * @return 
	 */
	private ArrayList<IContentProposal> findVariableProposals(String partialName) {
		ArrayList<IContentProposal> proposals = new ArrayList<IContentProposal>();
		Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);
		for (String var : bindings.keySet()) {
			if (var.startsWith(partialName)) {
				proposals.add(createProposal(var, var));
			}
		}
		return proposals;

	}

	/**
	 * @param proposals
	 * @param token
	 * @return 
	 */
	private ArrayList<IContentProposal> createProposalsBasedOnToken(ParserTree token,String contents,int position) {
		ArrayList<IContentProposal> proposals = new ArrayList<IContentProposal>();
        if(hasVariableParent(token)){
			ScriptVariableProposalProvider provider = new ScriptVariableProposalProvider(engine);
			return 	provider.createVariableProposals(token.getParent(),contents,position);
		}
		return proposals;
	}

	/**
	 * @param token
	 * @return
	 */
	private boolean hasVariableParent(ParserTree token) {
		final ParserTree parent = token.getParent();
		if (parent == null)
			return false;
		return parent instanceof ScriptVariable;
	}
	
	/**
	 * @param var
	 * @return
	 */
	private IContentProposal createProposal(String content, String proposal) {
		return new ScriptContentProposal(content, proposal);
	}
	

}
