package no.marintek.sima.script.handlers;

import java.util.Map;

import no.marintek.sima.script.internal.Activator;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.IPropertyChangeListener;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.ui.commands.IElementUpdater;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.ui.menus.UIElement;
import org.eclipse.ui.services.IServiceLocator;

/**
 * The implementation of the "toggle show script" command.
 * 
 * @author Tonny Madsen, The RCP Company
 */
public class ToggleShowScriptHandler extends AbstractHandler implements IHandler, IElementUpdater {

	/**
	 * Whether to show any script instead of the value.
	 */
	protected boolean myShowScript = false;


	/**
	 * The global command service.
	 */
	protected final ICommandService myCommandService;

	private IPropertyChangeListener myPropListener = new IPropertyChangeListener() {

		@Override
		public void propertyChange(PropertyChangeEvent event) {
			IPreferenceStore ps = Activator.getDefault().getPreferenceStore();
			boolean b = ps.getBoolean(Activator.SHOW_SCRIPT_PREFERENCE);
			if (b != myShowScript) {
				myShowScript = b;
				myCommandService.refreshElements("no.marintek.sima.script.commands.ToggleShowScript", null);
			}
		}
	};

	@SuppressWarnings("unchecked")
	@Override
	public void updateElement(UIElement element, Map parameters) {
		element.setChecked(myShowScript);
	}

	/**
	 * Construct the handler and sets up all needed listeners.
	 */
	public ToggleShowScriptHandler() {
		final IServiceLocator locator = PlatformUI.getWorkbench();

		myCommandService = (ICommandService) locator.getService(ICommandService.class);
		IPreferenceStore ps = Activator.getDefault().getPreferenceStore();
		ps.addPropertyChangeListener(myPropListener);
	}

	@Override
	public void dispose() {
		IPreferenceStore ps = Activator.getDefault().getPreferenceStore();
		ps.removePropertyChangeListener(myPropListener);
	}

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		IPreferenceStore ps = Activator.getDefault().getPreferenceStore();
		boolean b = ps.getBoolean(Activator.SHOW_SCRIPT_PREFERENCE);
		b = !b;
		ps.setValue(Activator.SHOW_SCRIPT_PREFERENCE, b);

		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		if (window instanceof ApplicationWindow) {
			ApplicationWindow applWindow = (ApplicationWindow) window;
			applWindow.setStatus(b ? "Show scripts" : "Show values");
		}
		return null;
	}
}
