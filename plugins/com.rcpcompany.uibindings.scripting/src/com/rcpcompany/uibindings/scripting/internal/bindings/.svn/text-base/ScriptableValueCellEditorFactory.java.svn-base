/**
 * 
 */
package no.marintek.sima.script.bindings;

import no.marintek.sima.MOAO;
import no.marintek.sima.ScriptManager;
import no.marintek.sima.ScriptableValue;
import no.marintek.sima.Task;
import no.marintek.sima.model.utility.MOAOUtil;

import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;

import com.rcpcompany.uibindings.ICellEditorFactory;
import com.rcpcompany.uibindings.ICellEditorFactoryContext;
import com.rcpcompany.uibindings.IValueBinding;
import com.rcpcompany.uibindings.IValueBindingCell;

/**
 * {@link ICellEditorFactory} for scriptable values.
 * 
 * @author Tonny Madsen, The RCP Company
 */
public class ScriptableValueCellEditorFactory implements ICellEditorFactory {
	@Override
	public CellEditor create(ICellEditorFactoryContext context) {
		final Composite parent = context.getParent();
		final IValueBindingCell cell = context.getCell();
		final IValueBinding binding = cell.getLabelBinding();

		final CellEditor ce = new CellEditor(parent) {
			private ScriptableValueEditorDialog myDialog;
			private String myOldScript;
			private ScriptManager myScriptManager;
			private MOAO myObject;
			private ScriptableValue myValue;

			@Override
			protected Control createControl(Composite parent) {
				final Shell shell = parent.getShell();
				if (!(binding.getModelObject() instanceof MOAO)) {
					return null;
				}
				myObject = (MOAO) binding.getModelObject();

				/*
				 * Find the task
				 */
				final Task task = MOAOUtil.findTaskOfObject(myObject);
				if (task == null) {
					return null;
				}

				myScriptManager = task.getScriptManager();
				myValue = myScriptManager.getCreateScriptableValue(myObject, binding.getModelFeature().getName());

				myOldScript = myValue.getScript();

				myDialog = new ScriptableValueEditorDialog(shell, myValue);

				return myDialog.getShell();
			}

			@Override
			public void activate() {
				super.activate();
				final int result = myDialog.open();
				switch (result) {
				case ScriptableValueEditorDialog.OK:
					break;
				case ScriptableValueEditorDialog.CANCEL:
					if (myOldScript!=null && myOldScript.equals("")) {
						myScriptManager.deleteScript(myObject, binding.getModelFeature().getName());
					} else {
						myValue.setScript(myOldScript);
					}
					break;
				case ScriptableValueEditorDialog.USE_VALUE:
					// The value has already been set, so we just need to delete the script...
					myScriptManager.deleteScript(myObject, binding.getModelFeature().getName());
					break;
				}

				binding.updateBinding();

				deactivate();
			}

			@Override
			protected Object doGetValue() {
				return null;
			}

			@Override
			protected void doSetFocus() {
			}

			@Override
			protected void doSetValue(Object value) {
			}
		};

		return ce;
	}

}
