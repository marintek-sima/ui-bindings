/**
 * 
 */
package no.marintek.sima.script;

import java.io.IOException;
import java.io.OutputStream;

import org.eclipse.swt.custom.StyledText;

/**
 *
 */
public class ScriptOutputStream extends OutputStream {

	private final StyledText output;

	public ScriptOutputStream(StyledText output) {
		this.output = output;
	}
	
	private boolean prependCR=false;
	private boolean closed=false;

	public void write(byte[] b, int off, int len) throws IOException {
		encodedWrite(new String(b, off, len));
	}

	public void write(byte[] b) throws IOException {
		write(b, 0, b.length);
	}

	public void write(int b) throws IOException {
		write(new byte[] { (byte) b }, 0, 1);
	}

	public synchronized void write(String str) throws IOException {
		encodedWrite(str);
	}

	@Override
    public synchronized void close() throws IOException {
        if(closed) {
            throw new IOException("Output Stream is closed"); //$NON-NLS-1$
        }
        if (prependCR) { // force writing of last /r
            prependCR = false;
            outputString("\r"); //$NON-NLS-1$
        }
        closed = true;
    }
    
	/**
	 * @param string
	 */
	private void outputString(String string) {
		output.append(string+"\n");
	}

	private void encodedWrite(String encodedString) throws IOException {
		if (closed) {
			throw new IOException("Output Stream is closed"); //$NON-NLS-1$
		}
		if (prependCR) {
			encodedString = "\r" + encodedString; //$NON-NLS-1$
			prependCR = false;
		}
		if (encodedString.endsWith("\r")) { //$NON-NLS-1$
			prependCR = true;
			encodedString = new String(encodedString.substring(0, encodedString.length() - 1));
		}
		outputString(encodedString);
	}

}
