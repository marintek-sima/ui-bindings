/**
 * 
 */
package no.marintek.sima.script;

import java.util.ArrayList;
import java.util.List;

import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;

import no.marintek.sima.model.utility.ScriptEvaluator;
import no.marintek.sima.utils.scripting.ParserTree;
import no.marintek.sima.utils.scripting.ScriptParser;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.ETypedElement;
import org.eclipse.jface.fieldassist.IContentProposal;

/**
 *
 */
public class ScriptVariableProposalProvider {

	private final ScriptEngine engine;

	/**
	 * 
	 */
	public ScriptVariableProposalProvider(ScriptEngine engine) {
		this.engine = engine;
	}

	/**
	 * @param proposals
	 * @param parent
	 * @param end 
	 * @param contents 
	 */
	public ArrayList<IContentProposal> createVariableProposals(ParserTree parent, String contents, int end) {
		ArrayList<IContentProposal> proposals = new ArrayList<IContentProposal>();
		String firstObject = parent.getChild(0).getText();
		final Object object = engine.get(firstObject);
		if (object instanceof EObject) {
			// we have found the base object
			final List<String> children = ScriptParser.flatten(parent);
			final EObject moao = (EObject)object;
			List<ETypedElement> elements = ScriptEvaluator.findTypedElements(moao.eClass(), children);
			for (ETypedElement element : elements) {
				String replacement = createReplacement(children, element);
				int start =parent.getCharPositionInLine();
				String content = createContentString(contents, start,end,replacement);
				String proposal = element.getName();
				proposals.add(createProposal(content, proposal));
			}
		} else {
			List<String> vars = findVariableByPartialString(firstObject);
			for(String var : vars){
				int start =parent.getCharPositionInLine();
				String content = createContentString(contents, start,end,var);
				if(var!=null)proposals.add(createProposal(content, var));
			}
		}
		return proposals;
	}
	
	/**
	 * @param contents
	 * @param start
	 * @param end
	 * @param var
	 * @return
	 */
	private String createContentString(String contents, int start, int end,String var) {
		StringBuilder proposal = new StringBuilder();
		proposal.append(contents.substring(0, start));
		proposal.append(var);
		proposal.append(contents.substring(end, contents.length()));
		return proposal.toString();
	}

	/**
	 * @param proposals
	 * @param text
	 */
	private List<String> findVariableByPartialString(String text) {
		Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);
		List<String> vars = new ArrayList<String>();
		for (String var : bindings.keySet()) {
			if (var.startsWith(text)) {
				vars.add(var);
			}
		}
		return vars;
	}

	private String createReplacement(List<String> variables, ETypedElement element) {
		String proposal = element.getName();
		StringBuilder builder = new StringBuilder();
		for (int i = 0; i < variables.size()-1; i++) {
			builder.append(variables.get(i)).append(".");
		}
		builder.append(proposal);
		if(element instanceof EOperation) {
			builder.append("()");
		}
		return builder.toString();
	}


	/**
	 * @param var
	 * @return
	 */
	protected IContentProposal createProposal(String content, String proposal) {
		IContentProposal prop = new ScriptContentProposal(content, proposal);
		return prop;
	}

}
