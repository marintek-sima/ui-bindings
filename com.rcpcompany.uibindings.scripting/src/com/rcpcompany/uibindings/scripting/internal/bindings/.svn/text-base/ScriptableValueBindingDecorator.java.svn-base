package no.marintek.sima.script.bindings;

import javax.script.ScriptException;

import no.marintek.sima.ScriptManager;
import no.marintek.sima.ScriptableValue;
import no.marintek.sima.Task;
import no.marintek.sima.model.utility.MOAOUtil;
import no.marintek.sima.model.utility.ScriptEvaluator;
import no.marintek.sima.script.ScriptContentProposalProvider;

import org.eclipse.core.databinding.validation.IValidator;
import org.eclipse.core.databinding.validation.ValidationStatus;
import org.eclipse.core.runtime.IStatus;

import com.rcpcompany.uibindings.IUIBindingDecorator;
import com.rcpcompany.uibindings.IValueBinding;
import com.rcpcompany.uibindings.decorators.BaseUIBindingDecorator;

/**
 * Decorator for the scripts of scriptable values
 * 
 * @author Tonny Madsen, The RCP Company
 */
public class ScriptableValueBindingDecorator extends BaseUIBindingDecorator implements IUIBindingDecorator {

	private ScriptEvaluator myEvaluator;

	@Override
	public void init(IValueBinding binding) {
		super.init(binding);

		final ScriptableValue obj = (ScriptableValue) getBinding().getModelObject();
		final Task task = MOAOUtil.findTaskOfObject(obj.getParent());
		ScriptManager myScriptManager = task.getScriptManager();
		myEvaluator = myScriptManager.getEvaluator();
	};

	@Override
	public IValidator getUIToModelAfterConvertValidator() {
		return new IValidator() {
			@Override
			public IStatus validate(Object value) {
				try {
					myEvaluator.getEngine().eval((String) value);
				} catch (final ScriptException ex) {
					return ValidationStatus.error("Error in script", ex);
				}
				return ValidationStatus.ok();
			}
		};
	};

	@Override
	public void decorateAssist() {
		setupContentProposalProvider(new ScriptContentProposalProvider(myEvaluator.getEngine()));
	}
}
