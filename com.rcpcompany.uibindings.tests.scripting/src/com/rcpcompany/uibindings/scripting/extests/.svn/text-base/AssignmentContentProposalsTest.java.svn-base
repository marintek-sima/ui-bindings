package no.marintek.sima.script.tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;

import no.marintek.sima.impl.BodyImpl;
import no.marintek.sima.script.AssignmentScriptContentProposalProvider;

import org.eclipse.jface.fieldassist.IContentProposal;
import org.junit.Before;
import org.junit.Test;

public class AssignmentContentProposalsTest {

	private ScriptEngineManager mgr = new ScriptEngineManager();
	private ScriptEngine engine = mgr.getEngineByName("JavaScript");
	
	@Before
	public void setUp() {
		engine.put("body", new BodyImpl(){});
	}
	
	@Test
	public void testEmptyProposal() {
		AssignmentScriptContentProposalProvider proposalProvider = new AssignmentScriptContentProposalProvider(engine);
		String contents="";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(1, proposals.length);
		IContentProposal proposal = proposals[0];
		assertTrue("body".equals(proposal.getContent()));
	}

	@Test
	public void testPartialProposal() {
		AssignmentScriptContentProposalProvider proposalProvider = new AssignmentScriptContentProposalProvider(engine);
		String contents="bo";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(1, proposals.length);
		IContentProposal proposal = proposals[0];
		assertTrue("body".equals(proposal.getContent()));
	}

	@Test
	public void testIncompleteProposal() {
		AssignmentScriptContentProposalProvider proposalProvider = new AssignmentScriptContentProposalProvider(engine);
		String contents="body.";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertTrue(proposals.length>0);
	}
	
	@Test
	public void testMemberProposal() {
		AssignmentScriptContentProposalProvider proposalProvider = new AssignmentScriptContentProposalProvider(engine);
		String contents="body.nam";
		int position=contents.length();
		final IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertTrue(proposals.length>0);
		IContentProposal proposal = proposals[0];
		final String content = proposal.getContent();
		assertTrue("body.name".equals(content));
	}
	
	@Test
	public void testCompositeMemberProposal() {
		AssignmentScriptContentProposalProvider proposalProvider = new AssignmentScriptContentProposalProvider(engine);
		String contents="body.initialPosition.";
		int position=contents.length();
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertTrue(proposals.length>0);
		final String content = proposals[0].getContent();
		assertEquals("body.initialPosition.description",content);
	}

	@Test
	public void testAssignment() {
		AssignmentScriptContentProposalProvider proposalProvider = new AssignmentScriptContentProposalProvider(engine);
		String contents="body.x=bod";
		int position=contents.length();
		IContentProposal[] proposals = proposalProvider.getProposals(contents, position);
		assertEquals(1, proposals.length);
		final String content = proposals[0].getContent();
		assertEquals("body.x=body",content);
	}
	
}
